package assign04;

import java.util.Scanner;

public class MethodPractice {

	public static void main(String[] args) {
		String test = shiftCipher("(Zest!)", 15);
		System.out.println(averageInRange(new int[]{1, 2, 3, 4, 5, 6, 7, 8}, 2, 5));
		
		System.out.println("Checking countIntegerZeros(new Scanner(\"hello 0 10 0.0 string0 0\"). "
				+ "Expecting a result of 2. The actual result is " 
				+ countIntegerZeros(new Scanner("hello 0 10 0.0 string0 0")) + ".");

	}
	
	/**
	 * Converts a kilometer amount into miles and rounds down to the nearest integer.
	 * 
	 * @param kilometers - the amount of kilometres to be converted to miles
	 * @return the amount of kilometers in miles, rounded down to the nearest integer
	 */
	public static int kilometersToMiles(double kilometers) {
		double miles = kilometers / 1.60934;
		
		return (int)miles;
	}
	
	
	/**
	 * Raises 2 to an exponent provided by the user
	 * 
	 * @param exponent - the power to raise 2 to
	 * @return the result of 2 raised to the exponent
	 */
	public static int powerOfTwo(int exponent) {
		if (exponent <= 0) {
			return 1;
		}else {
			int sum = 2;
			for (int i = 1; i<exponent; i++) {
				sum *= 2;
			}
			return sum;
		}
	}
	
	
	/**
	 * Takes a message and shifts it by a certain amount
	 * 
	 * @param message - the message to be shifted
	 * @param amount - the amount to shift by
	 * @return - the shifted message
	 */
	public static String shiftCipher(String message, int amount) {
		char[] lineChars = message.toCharArray();
		String shiftedMessage = "";
		
		for (int i = 0; i < lineChars.length; i++) {
			//shift character
        	lineChars[i] = (char)(lineChars[i] + amount);
        	
        	//if character is out of range, loop back to 32
        	if (lineChars[i] > 126) {
        		lineChars[i] = (char)(31 + (lineChars[i] - 126));
        	}
        	
        	shiftedMessage += lineChars[i];
		}
		
		return shiftedMessage;
	}
	
	
	/**
	 * 
	 * Counts the number of zeros in a scanner
	 * 
	 * @param scanner - the scanner containing the things to be read
	 * @return the count of zeros in the scanner
	 */
	public static int countIntegerZeros(Scanner scanner) {
		int count = 0;
		while (scanner.hasNext()) {
			if (scanner.hasNextInt()) {
                int nextNumber = scanner.nextInt();
                if (nextNumber == 0) {
                    count++;
                }
            } else {
                scanner.next();
            }
		}
		return count;
	}
	
	public static double averageInRange(int[] array, int beginIndex, int endIndex) {
		int sum = 0;
		int divisor = endIndex - beginIndex;
		if (divisor < 0 || beginIndex < 0 || endIndex > array.length - 1){
			return 0.0;
		}
		
		for (int i = beginIndex; i <= endIndex; i++) {
			sum += array[i];
		}
		
		return sum / divisor;
		
	}

}
